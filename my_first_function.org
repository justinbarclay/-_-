* A journey into madness: My first Emacs functions
** Why?
I am often asked, why do I use Emacs? Mostly because I like to break things. It is very easy for me to break my Emacs set-up.

No, but why Slack in Emacs? I like my Slack like I like my Emacs brittle and glued together with arcane magic I don't understand. I also like my Slack client to not hog all my resources, so I trust Emacs to handle resource usage better than Slack.

No, but why do you need custom functions for Slack? Because, I am a developer and I like to share things and I am lazy. So I spent several nights reading someone else code figuring out how to make sharing in Slack with Emacs easier.

Ok, so what did you actually do? I made some interactive functions that let me send the highlighted region of text to some channel/room in Slack.

** TLDR
Copy, paste, and run the code below to send a region to Slack
#+BEGIN_SRC emacs-lisp
(defun jb/send-region-to-slack-code ()
  (interactive)
  (let* ((team (slack-team-select))  ;; Get all rooms from selected team
         (room (slack-room-select
                (cl-loop for team in (list team)
                         append (with-slots (groups ims channels) team
                                  (append ims groups channels))))))
    (slack-message-send-internal (concat "```" (buffer-substring (region-beginning) (region-end)) "```")
                                 (oref room id)
                                 team)))

(defun jb/send-region-to-slack-quoted ()
  (interactive)
  (let ((teams (slack-team-select ())) ;; Select team
        (room (slack-room-select
               (cl-loop for team in (list teams)
                        for channels = (oref team channels)
                        nconc channels)))) ;; Get all rooms from selected team
    (slack-message-send-internal (concat ">" (buffer-substring (region-beginning) (region-end)))
                                 (oref room id)
                                 team)))

(defun jb/send-region-to-slack ()
  (interactive)
  (let ((team (slack-team-select)) ;; Select team
        (room (slack-room-select
               (cl-loop for team in (list team)
                        for channels = (oref team channels)
                        nconc channels)))) ;; Get all rooms from selected team
    (slack-message-send-internal (buffer-substring (region-beginning) (region-end))
                                 (oref room id)
                                 team)))
#+END_SRC
** Let's play!
If you wish to follow along, you will need to install and set-up emacs-slack
*** Install
Let's install [[https://github.com/yuya373/emacs-slack][emacs-slack]]!
If you use, use-package as your Emacs package amange, Yuya373 has some code you can just copy and paste into your init file.
If you don't use use-package, you could use [[https://github.com/emacscollective/borg][borg]] to assimilate the package into your Emacs.
If you don't use borg, you could use [[https://github.com/dimitri/el-get][el-get]] to install the packages for you.
If you don't have any of these, a nice simple ~M-x package-install emacs-slack~ works wonders.
*** Setup
To setup emacs-slack, just follow the helpful steps found on the [[https://github.com/yuya373/emacs-slack#how-to-get-token-the-harder-yet-officially-sanctioned-way][GitHub]] page
*** Play
 If you've never heard of emacs-slack before, this will probably be enough for you. You have Emacs-Slack setup and running, play with it. Live it. Love it. Forget about this post.
** Let's Dive In
*** Slack.el
Where the gang begins reading his code and deciding where we need to plug-in
*** Slack-message.el
We want to send a message right? Maybe this will help us?
**** defclass? defmethod?
EIEIO? WTH? I'm not old McDonald!
Who put OOP in my Lisp?
**** Damn you CCLOS!
*** I give up
At this point the gang has given up on reading through this code. It's strange and scary and now I am in a deep dark forest
** Dive Deeper
*** Hey Baby! I like your profile
Through the power of profiler I shall not be defeated
*** Where I learned about EDE
Emacs debugger to the rescure
*** Where I find out about slack-message-send-internal
Great, now all I need to do is find out how to build message, channel-id, and team
*** (defun slack-channel-select ())
*** My first success, "Hello World"
*** How the gang learned to copy a buffer
** Let's clean this up
*** make it more generic, not just channels, but any type of room!
*** Markdown that markup!
*** DRY IT UP!
** Thanks for joining me on this journey of learning and frustration.
